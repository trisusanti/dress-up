// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  name      String
  email     String  @unique
  password  String
  role      String  // 'user', 'admin', 'owner'
  createdAt DateTime @default(now())

  Wishlist  Wishlist[]
  Booking Booking[]
  Rental Rental[] 
}

model Clothes {
  id       Int     @id @default(autoincrement())
  name     String
  category String  // 'wedding', 'graduation', 'traditional'
  size     String?
  color    String?
  price    Float
  stock    Int
  createdAt DateTime @default(now())

  Wishlist  Wishlist[]
  Rental Rental[] 
}

model Wishlist {
  id       Int     @id @default(autoincrement())
  user     User    @relation(fields: [userId], references: [id])
  userId   Int
  clothes    Clothes   @relation(fields: [clothesId], references: [id])
  clothesId  Int
  createdAt DateTime @default(now())
}

model Booking {
  id         Int     @id @default(autoincrement())
  user       User    @relation(fields: [userId], references: [id])
  userId     Int
  scheduleDate DateTime
  status     String  // 'scheduled', 'completed', 'canceled'
  createdAt  DateTime @default(now())
}

model Rental {
  id         Int     @id @default(autoincrement())
  user       User    @relation(fields: [userId], references: [id])
  userId     Int
  clothes      Clothes   @relation(fields: [clothesId], references: [id])
  clothesId    Int
  startDate  DateTime
  endDate    DateTime
  status     String  // 'ongoing', 'completed', 'canceled'
  createdAt  DateTime @default(now())

  Tracking Tracking[]
  Return Return[]
}

model Tracking {
  id         Int     @id @default(autoincrement())
  rental     Rental  @relation(fields: [rentalId], references: [id])
  rentalId   Int
  status     String  // 'scheduled', 'fitting completed', 'rental ongoing', 'return pending', 'completed'
  updatedAt  DateTime @default(now())
}

model Return {
  id         Int     @id @default(autoincrement())
  rental     Rental  @relation(fields: [rentalId], references: [id])
  rentalId   Int
  returnDate DateTime
  condition  String  // 'good', 'damaged', 'lost'
  createdAt  DateTime @default(now())
}
